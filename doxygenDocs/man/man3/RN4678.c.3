.TH "RN4678.c" 3 "Mon Jan 13 2020" "Version 1.0" "copter_project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
RN4678.c \- The GPIO setup and data transfer functions for the RN4678 module\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'RN4678\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBsend_pac\fP (char *data, size_t size)"
.br
.RI "This is used to send Multiwii command to the quadcopter via bluetooth\&. The header and the command are packed in one packet of bytes\&. Activate the GPIO port for sending data check if port is ready and send data using UART write and wait till bytes is completely written and turnoff GPIO pin\&. "
.ti -1c
.RI "void \fBstart_com\fP (char *cmd, uint8_t size, uint8_t retsize, char *input)"
.br
.RI "This is used to send Multiwii command to the quadcopter via bluetooth\&. The header and the command are packed in one packet of bytes\&. Activate the GPIO port for sending data check if port is ready and send data using UART write and wait till bytes is completely written and turnoff GPIO pin\&. "
.ti -1c
.RI "void \fBRN4678Fxn\fP (UArg arg0, UArg arg1)"
.br
.RI "This is RN4678 task\&. This task is managed by the RTOS task manager using the multi-task priority scheduling\&. A connection is made with the bluetooth device (RN4678 module) after setting up the UART\&. This glabal uart is then used to later send command to the (RN4678 module)\&. "
.ti -1c
.RI "void \fBinit_bt\fP ()"
.br
.RI "Setup of the GPIO pins and Peripherable ports for the RN4678 module\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "UART_Handle \fBuart\fP"
.br
.ti -1c
.RI "uint8_t \fBready_for_data\fP = 0"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
\fBAuthor\fP
.RS 4
Alexander Ã–sterreicher es19m008 
.PP
Dennis Kwame Addo es19m006 
.RE
.PP
\fBDate\fP
.RS 4
06\&.12\&.2019
.RE
.PP
More information about the project can be found here 
.PP
\fBSee also\fP
.RS 4
https://embsys.technikum-wien.at/mio/mes/1/esw/project/project.html#_documentation
.RE
.PP
\fBVersion\fP
.RS 4
1\&.0 
.RE
.PP

.PP
Definition in file \fBRN4678\&.c\fP\&.
.SH "Function Documentation"
.PP 
.SS "void init_bt ()"

.PP
\fBParameters\fP
.RS 4
\fIvoid\fP nothing 
.RE
.PP
\fBReturns\fP
.RS 4
nothing but log and abort of failure to setup task for the BLUE Module 
.RE
.PP

.PP
Definition at line 165 of file RN4678\&.c\&.
.PP
References RN4678_CTS, RN4678_CTS_PORT, RN4678_RTS, RN4678_RTS_PORT, RN4678Fxn(), RST, RST_PORT, STATUS1, STATUS1_PORT, STATUS2, STATUS2_PORT, SW_BTN, SW_BTN_PORT, U6RX, U6RX_PIN, U6TX, U6TX_PIN, U6TX_PORT, WAKEUP, and WAKEUP_PORT\&.
.PP
Referenced by main()\&.
.SS "void RN4678Fxn (UArg arg0, UArg arg1)"

.PP
\fBParameters\fP
.RS 4
\fIarg0\fP xdc data for passing commands to RTOS task 
.br
\fIarg1\fP xdc data for passing commands to RTOS task
.RE
.PP
PNB: This is used in the CLI application
.PP
\fBReturns\fP
.RS 4
Nothing 
.RE
.PP

.PP
Definition at line 93 of file RN4678\&.c\&.
.PP
References Board_UART6, ready_for_data, start_com(), STATUS1, STATUS1_PORT, STATUS2, STATUS2_PORT, and uart\&.
.PP
Referenced by init_bt()\&.
.SS "void send_pac (char * data, size_t size)"

.PP
\fBParameters\fP
.RS 4
\fIdata\fP Multiwii package in bytes to send\&. 
.br
\fIsize\fP Total size of data to send\&.
.RE
.PP
\fBReturns\fP
.RS 4
Nothing 
.RE
.PP

.PP
Definition at line 37 of file RN4678\&.c\&.
.PP
References RN4678_CTS, RN4678_CTS_PORT, RN4678_RTS, RN4678_RTS_PORT, and uart\&.
.PP
Referenced by set_flight_controls()\&.
.SS "void start_com (char * cmd, uint8_t size, uint8_t retsize, char * input)"

.PP
\fBParameters\fP
.RS 4
\fIcmd\fP Command to send to the quadcopter 
.br
\fIsize\fP Total size of data to send\&. 
.br
\fIretsize\fP Total size of the return bytes (input data)\&. 
.br
\fIinput\fP Input data from the commandline\&.
.RE
.PP
PNB: This is used in the CLI application
.PP
\fBReturns\fP
.RS 4
Nothing 
.RE
.PP

.PP
Definition at line 62 of file RN4678\&.c\&.
.PP
References RN4678_CTS, RN4678_CTS_PORT, RN4678_RTS, RN4678_RTS_PORT, and uart\&.
.PP
Referenced by RN4678Fxn()\&.
.SH "Variable Documentation"
.PP 
.SS "uint8_t ready_for_data = 0"
ready_for_data Global 8 bit variable for controlling the data transfer 
.PP
Definition at line 23 of file RN4678\&.c\&.
.PP
Referenced by joystick_fnx(), and RN4678Fxn()\&.
.SS "UART_Handle uart"
uart Global UART handler for UART write command 
.PP
Definition at line 21 of file RN4678\&.c\&.
.PP
Referenced by RN4678Fxn(), send_pac(), and start_com()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for copter_project from the source code\&.
