/*
 * rtos base-system configuration for TI-RTOS 2.16 and above
 * (c) DIScoVER 2015, 2016, 2017, 2018
 * supplies basic ndk configuration with ethernet, ipv4, icmp and tcp support
*/

/*
 *  ======== application.cfg ========
 */

/* ================ General configuration ================ */
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');
var xdc_runtime_Timestamp = xdc.useModule('xdc.runtime.Timestamp');
var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
//Begin Software Interrupts
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
//End Software Interrupts
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
//var FatFS = xdc.useModule('ti.sysbios.fatfs.FatFS');

/* ================ System configuration ================ */
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var Mailbox = xdc.useModule('ti.sysbios.knl.Mailbox');
var Event = xdc.useModule('ti.sysbios.knl.Event');
var HeapBuf = xdc.useModule('ti.sysbios.heaps.HeapBuf');
var Timer = xdc.useModule('ti.sysbios.hal.Timer');

//Begin Network Stack
var Global = xdc.useModule('ti.ndk.config.Global');
var Ip = xdc.useModule('ti.ndk.config.Ip');
var Icmp = xdc.useModule('ti.ndk.config.Icmp');
var Emac = xdc.useModule('ti.ndk.config.Emac');
var Tcp = xdc.useModule('ti.ndk.config.Tcp');
//End Network Stack

System.SupportProxy = SysMin;

/* ================ Kernel configuration ================ */
/* Use Custom library */
var BIOS = xdc.useModule('ti.sysbios.BIOS');
//less debug capabilites, but faster and smaller
BIOS.libType = BIOS.LibType_Custom;
//slower and bigger, but full debug capabilities
//BIOS.libType = BIOS.LibType_Debug;

BIOS.logsEnabled = false;
BIOS.assertsEnabled = false;


/* ================ Driver configuration ================ */
/*
 Per driver configuration is not neccessary anymore.
 TIRTOS and XDC automatically detect which driver is 
 used by the application and link the modules when needed.
 \cite{TI-RTOS 2.16 User Guide}
*/

var driversConfig = xdc.useModule('ti.drivers.Config');

//deactivate assertions and logging for drivers
driversConfig.libType = driversConfig.LibType_NonInstrumented;


Task.idleTaskStackSize = 512;
BIOS.heapSize = (1024*10*4);/*system heap - used for task stacks for example*/

/*
Buffer size for system_printf() - Do NOT use for regular messages, only for abort messages in case of debugging or startup - 
It is  VERY SLOW, needs system_flush() after every call and 
may cause observation of unpredictable behaviour.
*/
SysMin.bufSize = 1024;
Task.enableIdleTask = true;
Clock.timerId = 0;

//Begin Network Stack Configuration
Global.IPv6 = false;
Ip.autoIp = false;

/*change me*/
Ip.address = "192.168.0.30";//change me as required
Ip.domainName = "local.net";//chnage me as required
Ip.mask = "255.255.255.0";//change me as required
/*end change me*/

Global.netSchedulerPri = Global.NC_PRIORITY_HIGH;

/*export configuration symbols for NDK run-time task creation*/
Program.global.NdkTaskHighPrio = Global.defaultHighTaskPriLevel;
Program.global.NdkTaskHighStack = Global.defaultHighTaskStackSize;

Program.global.NdkTaskKernPrio = Global.defaultKernTaskPriLevel;

Program.global.NdkTaskLowPrio = Global.defaultLowTaskPriLevel;
Program.global.NdkTaskLowStack = Global.defaultLowTaskStackSize;

Program.global.NdkTaskNormPrio = Global.defaultNormTaskPriLevel;
Program.global.NdkTaskNormStack = Global.defaultNormTaskStackSize;
//End Network Stack Configuration
  
//Begin Software Interrupt Configuration
/*available software interrupt priorities*/
Swi.numPriorities = 10;
/*export configuration symbols*/
Program.global.SwiNumPriorities = Swi.numPriorities;
//End Software Interrupt Configuration

